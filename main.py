"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ö –≤ Telegram –∫–∞–Ω–∞–ª.
"""

import config

print(config.TELEGRAM_TOKEN)


from html import escape
import traceback
import asyncio
import feedparser
import requests
from bs4 import BeautifulSoup
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from config import TELEGRAM_TOKEN, TELEGRAM_CHANNEL_ID

bot = Bot(token=TELEGRAM_TOKEN)


# --- –û–ß–ò–°–¢–ö–ê –°–¢–ê–¢–¨–ò –û–¢ –ú–£–°–û–†–ê ---
async def fetch_full_article(url):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏ –ø–æ URL.
    """
    try:
        response = requests.get(url, timeout=10)
        soup = BeautifulSoup(response.text, "html.parser")

        article_text = ""

        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π article-–±–ª–æ–∫
        article = soup.find("article")

        if not article:
            for class_name in [
                "article__text",
                "article-content",
                "content",
                "main-text",
            ]:
                article = soup.find("div", class_=class_name)
                if article:
                    break

        if article:
            paragraphs = article.find_all("p")
            for p in paragraphs:
                text = p.get_text(strip=True)
                if text and not any(
                    phrase in text.lower()
                    for phrase in ["—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
                ):
                    article_text += text + "\n"
        else:
            # fallback: –æ—á–∏—â–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            raw_text = soup.get_text(separator="\n")
            lines = raw_text.splitlines()
            clean_lines = []
            for line in lines:
                line = line.strip()
                if (
                    len(line) > 30
                    and not line.lower().startswith("—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
                    and "–ø–æ–¥–ø–∏—Å–∫–∞" not in line.lower()
                    and "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" not in line.lower()
                ):
                    clean_lines.append(line)
            article_text = "\n".join(clean_lines[:10])  # –º–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–æ–∫

        return article_text.strip()

    except (requests.exceptions.RequestException, Exception) as e:
        print(f"Error fetching full article: {e}")
        traceback.print_exc()
        return None


# --- –ü–û–ò–°–ö –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ---
async def fetch_image(link):
    """
    –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—å–µ.
    """
    try:
        response = requests.get(link, timeout=10)
        soup = BeautifulSoup(response.text, "html.parser")

        og_image = soup.find("meta", property="og:image")
        if og_image and og_image.get("content"):
            return og_image["content"]

        img = soup.find("img")
        if img and img.get("src"):
            return img["src"]

    except requests.exceptions.RequestException as e:
        print(f"Error fetching image: {e}")
        traceback.print_exc()

    return None


# --- –ü–ê–†–°–ò–ù–ì RSS ---
async def fetch_rss_news(url):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS-–∫–∞–Ω–∞–ª–∞.
    """
    feed = feedparser.parse(url)
    news = []
    for entry in feed.entries[:5]:
        summary = getattr(entry, "summary", "") or getattr(entry, "description", "")
        news.append(
            {
                "title": entry.title,
                "link": entry.link,
                "summary": summary,
            }
        )
    return news


# --- –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM ---
async def post_news():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram.
    """
    rss_feeds = [
        "https://rssexport.rbc.ru/rbcnews/news/stream.rss",
        "https://ria.ru/export/rss2/index.xml",
        "https://tass.ru/rss/v2.xml",
        "https://www.vedomosti.ru/rss/news",
        "https://www.kommersant.ru/RSS/news",
    ]

    for rss_url in rss_feeds:
        print(f"Fetching news from: {rss_url}")
        news_items = await fetch_rss_news(rss_url)

        for item in news_items:
            print(f"Processing: {item['title']}")
            full_article = await fetch_full_article(item["link"])
            image_url = await fetch_image(item["link"])

            title_safe = escape(item["title"])

            if full_article:
                article_safe = escape(full_article[:1500])  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É
                text = f"üì∞ <b>{title_safe}</b>\n\n{article_safe}"
            else:
                summary_safe = escape(item["summary"][:1000])
                text = f"üì∞ <b>{title_safe}</b>\n\n{summary_safe}"

            comment_button = InlineKeyboardButton(
                "–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", url=f"{item['link']}#comments"
            )
            keyboard = InlineKeyboardMarkup([[comment_button]])

            try:
                if image_url:
                    await asyncio.sleep(3)
                    await bot.send_photo(
                        chat_id=TELEGRAM_CHANNEL_ID,
                        photo=image_url,
                        reply_markup=keyboard,
                    )
                    await asyncio.sleep(1)
                    await bot.send_message(
                        chat_id=TELEGRAM_CHANNEL_ID,
                        text=text[:4096],
                        parse_mode="HTML",
                        reply_markup=keyboard,
                    )
                else:
                    await bot.send_message(
                        chat_id=TELEGRAM_CHANNEL_ID,
                        text=text[:4096],
                        parse_mode="HTML",
                        reply_markup=keyboard,
                    )
                    await asyncio.sleep(2)

                print(f"‚úÖ Sent: {item['title']}")

            except Exception as e:
                print(f"Error sending news: {e}")
                traceback.print_exc()


# --- –ó–ê–ü–£–°–ö ---
async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
    """
    await post_news()


if __name__ == "__main__":
    asyncio.run(main())
